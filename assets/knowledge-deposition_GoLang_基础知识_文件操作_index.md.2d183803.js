import{_ as s,c as n,o as a,e as l}from"./app.7b8aa9ff.js";const _=JSON.parse('{"title":"文件操作","description":"","frontmatter":{"layout":"doc"},"headers":[{"level":2,"title":"打开文件模式","slug":"打开文件模式","link":"#打开文件模式","children":[]}],"relativePath":"knowledge-deposition/GoLang/基础知识/文件操作/index.md"}'),e={name:"knowledge-deposition/GoLang/基础知识/文件操作/index.md"},o=l(`<h1 id="文件操作" tabindex="-1">文件操作 <a class="header-anchor" href="#文件操作" aria-hidden="true">#</a></h1><h2 id="打开文件模式" tabindex="-1">打开文件模式 <a class="header-anchor" href="#打开文件模式" aria-hidden="true">#</a></h2><div class="language-Go"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">O_RDONLY int </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> syscall</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">O_RDONLY </span><span style="color:#676E95;font-style:italic;">// open the file read-only.  只读</span></span>
<span class="line"><span style="color:#A6ACCD;">O_WRONLY int </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> syscall</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">O_WRONLY </span><span style="color:#676E95;font-style:italic;">// open the file write-only. 只写</span></span>
<span class="line"><span style="color:#A6ACCD;">O_RDWR   int </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> syscall</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">O_RDWR   </span><span style="color:#676E95;font-style:italic;">// open the file read-write. 读写</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">O_APPEND int </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> syscall</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">O_APPEND </span><span style="color:#676E95;font-style:italic;">// append data to the file when writing. 追加</span></span>
<span class="line"><span style="color:#A6ACCD;">O_CREATE int </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> syscall</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">O_CREAT  </span><span style="color:#676E95;font-style:italic;">// create a new file if none exists. 如果不存在就创建</span></span>
<span class="line"><span style="color:#A6ACCD;">O_EXCL   int </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> syscall</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">O_EXCL   </span><span style="color:#676E95;font-style:italic;">// used with O_CREATE, file must not exist. 文件必须不存在</span></span>
<span class="line"><span style="color:#A6ACCD;">O_SYNC   int </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> syscall</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">O_SYNC   </span><span style="color:#676E95;font-style:italic;">// open for synchronous I/O. 同步I/O</span></span>
<span class="line"><span style="color:#A6ACCD;">O_TRUNC  int </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> syscall</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">O_TRUNC  </span><span style="color:#676E95;font-style:italic;">// truncate regular writable file when opened. 打开时清空文件</span></span>
<span class="line"></span></code></pre></div>`,3),t=[o];function p(c,r,i,y,D,C){return a(),n("div",null,t)}const d=s(e,[["render",p]]);export{_ as __pageData,d as default};
