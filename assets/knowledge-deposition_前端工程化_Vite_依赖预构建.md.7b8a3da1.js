import{_ as e,c as s,o,a as l}from"./app.98a96f68.js";const a="/static-blog/image/Vite/pre-built/1.png",n="/static-blog/image/Vite/pre-built/2.png",p="/static-blog/image/Vite/pre-built/4.png",c="/static-blog/image/Vite/pre-built/5.png",t="/static-blog/image/Vite/pre-built/6.png",g=JSON.parse('{"title":"依赖预构建","description":"","frontmatter":{"layout":"doc"},"headers":[{"level":2,"title":"为什么需要依赖预构建","slug":"为什么需要依赖预构建","link":"#为什么需要依赖预构建","children":[]},{"level":2,"title":"依赖预构建相关配置","slug":"依赖预构建相关配置","link":"#依赖预构建相关配置","children":[{"level":3,"title":"optimizeDeps.entries","slug":"optimizedeps-entries","link":"#optimizedeps-entries","children":[]},{"level":3,"title":"optimizeDeps.exclude","slug":"optimizedeps-exclude","link":"#optimizedeps-exclude","children":[]},{"level":3,"title":"optimizeDeps.include","slug":"optimizedeps-include","link":"#optimizedeps-include","children":[]},{"level":3,"title":"optimizeDeps.esbuildOptions","slug":"optimizedeps-esbuildoptions","link":"#optimizedeps-esbuildoptions","children":[]},{"level":3,"title":"optimizeDeps.force","slug":"optimizedeps-force","link":"#optimizedeps-force","children":[]},{"level":3,"title":"optimizeDeps.disabled","slug":"optimizedeps-disabled","link":"#optimizedeps-disabled","children":[]}]},{"level":2,"title":"缓存","slug":"缓存","link":"#缓存","children":[{"level":3,"title":"文件系统缓存","slug":"文件系统缓存","link":"#文件系统缓存","children":[]},{"level":3,"title":"浏览器缓存","slug":"浏览器缓存","link":"#浏览器缓存","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"relativePath":"knowledge-deposition/前端工程化/Vite/依赖预构建.md"}'),i={name:"knowledge-deposition/前端工程化/Vite/依赖预构建.md"},d=l(`<h1 id="依赖预构建" tabindex="-1">依赖预构建 <a class="header-anchor" href="#依赖预构建" aria-hidden="true">#</a></h1><p><code>Vite</code>是一个提倡<code>no-boundle</code>的构建工具，相比于<code>Webpack</code>，可以做到开发时<code>模块按需编译</code>，这里的<code>模块</code>分为<code>两部分</code></p><ul><li><p>一部分是<code>自己写的业务代码</code></p></li><li><p>一部分是<code>依赖的第三方库</code>，即<code>node_modules</code>中的第三方库的代码</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p><code>Vite</code>中的<code>no-bundle</code>只是针对于<code>自己写的业务代码</code>，对于<code>依赖的第三方库</code>，<code>Vite</code>选择使用<code>esbuild</code>进行<code>bundle(打包)</code></p></li><li><p>依赖预构建仅作用于<code>开发环境</code>，使用<code>esbuild</code>将依赖转换为<code>ES Module</code>规范，在生产环境中，使用<code>@rollup/plugin-commonjs</code>代替</p></li></ul></div><h2 id="为什么需要依赖预构建" tabindex="-1">为什么需要依赖预构建 <a class="header-anchor" href="#为什么需要依赖预构建" aria-hidden="true">#</a></h2><ul><li><code>统一项目依赖库的导入/导出规范</code>：当项目中有依赖库是<code>非ES Module</code>的语法，例如<code>CommonJS</code>、<code>UMD</code>语法时，<code>Vite</code>会调用<code>esbuild</code>将其转换为<code>ES Module</code>规范的代码</li></ul><blockquote><p><code>react</code>这个库就没有<code>ES</code>版本的产物，其仍旧是<code>commonjs</code>语法</p></blockquote><ul><li>方便<code>路径重写</code>，统一项目中第三方模块的导入路径：在<code>依赖预构建</code>时，对导入的第三方包进行统一处理，处理后的结果放到当前项目的<code>node_modules/.vite/deps</code>目录下，并且在引入该模块的地方进行<code>路径重写</code>，这样就统一所有资源的引入路径</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 路径重写前</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lodash-es</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 路径重写之后</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/node_modules/.vite/deps/lodash-es.js?v=a2b41ab7</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>解决<code>网络多包传输</code>问题，如果没有依赖预构建，当一个模块中<code>import</code>的模块/方法很多，而依赖的模块中又<code>import</code>了其他模块/方法时，每个<code>import</code>都会创建一个<code>http</code>请求，导致页面加载十分缓慢，例如下面的<code>lodash-es</code>库，而使用<code>依赖预构建</code>后，会将这个库的代码打包成一个文件，这样就减少了很多请求，页面加载也会快很多</li></ul><blockquote><p><code>lodash-es</code>库，当关闭依赖预构建功能后，由于其是<code>ES Module</code>规范，会引发大量<code>http</code>请求，造成不必要的网络开销</p></blockquote><p><img src="`+a+'" alt=""></p><blockquote><p>开启依赖预构建后，<code>Vite</code>将内部多个模块的<code>ESM</code>依赖关系转换为单个模块，提高后续页面加载性能</p></blockquote><p><img src="'+n+`" alt=""></p><h2 id="依赖预构建相关配置" tabindex="-1">依赖预构建相关配置 <a class="header-anchor" href="#依赖预构建相关配置" aria-hidden="true">#</a></h2><p>官网地址<a href="https://vitejs.dev/config/dep-optimization-options.html" target="_blank" rel="noreferrer">戳这里</a>查看</p><h3 id="optimizedeps-entries" tabindex="-1"><code>optimizeDeps.entries</code> <a class="header-anchor" href="#optimizedeps-entries" aria-hidden="true">#</a></h3><ul><li><code>Type: string | string[]</code></li></ul><p>默认情况下，<code>Vite</code>会默认抓取项目中所有的<code>.html</code>文件，将<code>HTML</code>文件作为<code>应用入口</code>，然后根据入口文件扫描出项目中用到的<code>第三方依赖</code>，最后对这些依赖逐个进行编译</p><p>如果不满足需求，可以通过自定义<code>entries</code>来自定义入口文件</p><blockquote><p>例如<code>vite.config.js</code>:</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 为一个字符串数组</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">entries</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/app.tsx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>entries</code>也支持<a href="https://github.com/mrmlnc/fast-glob#basic-syntax" target="_blank" rel="noreferrer">glob语法</a></p><blockquote><p>例如</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将所有的 .ts 文件作为扫描入口 </span></span>
<span class="line"><span style="color:#FFCB6B;">entries</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/*.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="optimizedeps-exclude" tabindex="-1"><code>optimizeDeps.exclude</code> <a class="header-anchor" href="#optimizedeps-exclude" aria-hidden="true">#</a></h3><ul><li><code>Type: string[]</code></li></ul><p><code>exclude</code>用于设置某些依赖不进行依赖预构建</p><p>在排除某个依赖时，要注意该依赖所<code>依赖的其他包</code>是否有<code>ES Module</code>产物，如果其中有的包没有<code>ES Module</code>产物将会报错，遇到这种情况，可以搭配<code>include</code>使用，将<code>依赖的其他包</code>中没有<code>ES Module</code>的包进行依赖预构建</p><p><code>vite.config.js</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">include</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 间接依赖的声明语法，通过\`&gt;\`分开, 如\`a &gt; b\`表示 a 中依赖的 b</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a &gt; b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    ]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="optimizedeps-include" tabindex="-1"><code>optimizeDeps.include</code> <a class="header-anchor" href="#optimizedeps-include" aria-hidden="true">#</a></h3><ul><li><code>Type: string[]</code></li></ul><p>默认情况下，不在<code>node_modules</code>内的链接包不会进行依赖预构建，使用此选项可以指定将某些包进行依赖预构建</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 配置为一个字符串数组，将lodash-es、vue和src/components下的所有.vue文件强制进行预构建</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">include</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lodash-es</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/components/*.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="optimizedeps-esbuildoptions" tabindex="-1"><code>optimizeDeps.esbuildOptions</code> <a class="header-anchor" href="#optimizedeps-esbuildoptions" aria-hidden="true">#</a></h3><ul><li><code>Type：</code><a href="https://esbuild.github.io/api/" target="_blank" rel="noreferrer">EsbuildBuildOptions</a></li></ul><p>在<code>依赖(dep)扫描</code>和<code>优化</code>期间传递给<code>esbuild</code>的选项</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>某些选项被省略，因为更改它们将与<code>Vite</code>的依赖优化不兼容</p></li><li><p><code>plugins</code>会与<code>Vite</code>的依赖插件合并</p></li></ul></div><h3 id="optimizedeps-force" tabindex="-1"><code>optimizeDeps.force</code> <a class="header-anchor" href="#optimizedeps-force" aria-hidden="true">#</a></h3><ul><li><code>Type: boolean</code></li></ul><p>设置为<code>true</code>以强制依赖项预捆绑，忽略先前缓存的优化依赖项。</p><h3 id="optimizedeps-disabled" tabindex="-1"><code>optimizeDeps.disabled</code> <a class="header-anchor" href="#optimizedeps-disabled" aria-hidden="true">#</a></h3><p><strong>该选项目前还是<code>实验性</code>的阶段</strong></p><ul><li><code>Type: boolean | &#39;build&#39; | &#39;dev&#39;</code>，默认值为<code>build</code></li></ul><p>该选项<code>表示</code>禁用依赖预构建\`的情况</p><ul><li><p>设置为<code>true</code>表示在<code>生产环境</code>和<code>开发环境</code>禁用<code>依赖预构建</code></p></li><li><p>设置为<code>build</code>或<code>dev</code>，仅在其中一种模式下禁用<code>依赖预构建</code>，默认情况下，仅在<code>开发中</code>启用<code>依赖预构建</code></p></li></ul><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-hidden="true">#</a></h2><h3 id="文件系统缓存" tabindex="-1">文件系统缓存 <a class="header-anchor" href="#文件系统缓存" aria-hidden="true">#</a></h3><p><code>Vite</code>将依赖预构建的结果缓存在<code>node_modules/.vite</code>中。它根据以下几个来源确定是否需要重新进行预构建</p><ul><li><p>包管理器的<code>lock</code>文件，如<code>package-lock.json</code>、<code>yarn.lock</code>, <code>pnpm-lock.yaml</code>、<code>bun.lockb</code></p></li><li><p>补丁文件夹(一般是<code>patch-package</code>)修改的时间</p></li><li><p><code>vite.config.js</code>中的预构建的相关配置</p></li><li><p>环境变量<code>NODE_ENV</code>的值</p></li></ul><p>以上的选项中，有一个改变就会重新进行预构建</p><p>如果以上选项均为改变，但是想重新进行预构建，可以使用<code>--force</code>选项或者手动删除<code>node_modules/.vite</code>缓存目录</p><h3 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-hidden="true">#</a></h3><p>当请求依赖预构建后的资源时，<code>Vite</code>的<code>Dev Server</code>会在响应头中添加<code>Cache-Control: max-age=31536000,immutable</code>来设置<code>强缓存</code>，缓存过期时间被设置为<code>一年</code>，表示缓存过期前浏览器对预构建产物的请求不会再经过<code>Vite Dev Server</code>，会直接用缓存的内容</p><p>![](/image/Vite/pre-built/3.png</p><p>如果想调试第三方库的源码，让浏览器加载添加<code>debug</code>调试后的源代码，可以通过以下步骤</p><ul><li>修改<code>node_module</code>中的第三方库的源代码，中止<code>Vite Dev Server</code>重新启动，并添加<code>--force</code>选项</li></ul><blockquote><p>例如</p></blockquote><p><code>vite.config.js</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">get</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lodash-es</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">classes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">one</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">小明</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">classes.one.name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">============</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>修改<code>node_modules/lodash-es/_baseGet.js</code>如下：</p><p><img src="`+p+`" alt=""></p><p>然后重启服务</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--host</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--force</span></span>
<span class="line"></span></code></pre></div><p>可以看到命令行中会提示重新进行依赖预构建</p><p><img src="`+c+'" alt=""></p><p>然后到浏览器中查看，刚才添加的<code>debug</code>信息已经打印</p><p><img src="'+t+'" alt=""></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-hidden="true">#</a></h2><ul><li><strong>相关代码可查看</strong><a href="https://github.com/mx52jing/vite-related/tree/main/dependencies-pre-built" target="_blank" rel="noreferrer">dependencies-pre-built</a></li></ul>',71),r=[d];function D(y,F,u,h,m,b){return o(),s("div",null,r)}const A=e(i,[["render",D]]);export{g as __pageData,A as default};
