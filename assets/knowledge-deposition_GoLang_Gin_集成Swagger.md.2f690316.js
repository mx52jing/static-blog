import{_ as s,c as a,o as n,e as l}from"./app.345b5049.js";const C=JSON.parse('{"title":"集成Swagger","description":"","frontmatter":{"layout":"doc"},"headers":[{"level":2,"title":"依赖安装和初始化","slug":"依赖安装和初始化","link":"#依赖安装和初始化","children":[{"level":3,"title":"安装Swagger","slug":"安装swagger","link":"#安装swagger","children":[]},{"level":3,"title":"安装gin-swagger扩展","slug":"安装gin-swagger扩展","link":"#安装gin-swagger扩展","children":[]},{"level":3,"title":"在Go项目的根目录初始化Swagger","slug":"在go项目的根目录初始化swagger","link":"#在go项目的根目录初始化swagger","children":[]}]},{"level":2,"title":"gin-swagger注解","slug":"gin-swagger注解","link":"#gin-swagger注解","children":[{"level":3,"title":"全局注解","slug":"全局注解","link":"#全局注解","children":[]},{"level":3,"title":"API层面注解","slug":"api层面注解","link":"#api层面注解","children":[]}]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]}],"relativePath":"knowledge-deposition/GoLang/Gin/集成Swagger.md"}'),o={name:"knowledge-deposition/GoLang/Gin/集成Swagger.md"},e=l(`<h1 id="集成swagger" tabindex="-1">集成Swagger <a class="header-anchor" href="#集成swagger" aria-hidden="true">#</a></h1><p>通过在代码中添加符合swagger规范的注解，可以自动生成文档</p><h2 id="依赖安装和初始化" tabindex="-1">依赖安装和初始化 <a class="header-anchor" href="#依赖安装和初始化" aria-hidden="true">#</a></h2><h3 id="安装swagger" tabindex="-1">安装Swagger <a class="header-anchor" href="#安装swagger" aria-hidden="true">#</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github.com/swaggo/swag/cmd/swag</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 生成可执行文件</span></span>
<span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github.com/swaggo/swag/cmd/swag@latest</span></span>
<span class="line"></span></code></pre></div><p>查看swagger版本</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">swag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"></span></code></pre></div><p>(Mac)如果运行<code>swag -v</code>以下错误，说明<code>GOPATH</code>未添加到环境变量中</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">zsh:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">command</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">found:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">swag</span></span>
<span class="line"></span></code></pre></div><p>需要手动添加环境变量</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 进入zsh配置</span></span>
<span class="line"><span style="color:#FFCB6B;">nvim</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.zshrc</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 添加如下行</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> PATH</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$GO_PATH</span><span style="color:#C3E88D;">/bin:</span><span style="color:#A6ACCD;">$PATH</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>如上：<code>$GO_PATH</code>就是你的<code>go</code>安装目录，可根据自己机器的路径来定，可使用<code>go env</code>查看<code>GOPATH</code>的值，比如我的是<code>export PATH=&quot;$HOME/go/bin:$PATH&quot;</code></p></blockquote><h3 id="安装gin-swagger扩展" tabindex="-1">安装gin-swagger扩展 <a class="header-anchor" href="#安装gin-swagger扩展" aria-hidden="true">#</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github.com/swaggo/gin-swagger</span></span>
<span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github.com/swaggo/files</span></span>
<span class="line"></span></code></pre></div><h3 id="在go项目的根目录初始化swagger" tabindex="-1">在Go项目的<code>根目录</code>初始化<code>Swagger</code> <a class="header-anchor" href="#在go项目的根目录初始化swagger" aria-hidden="true">#</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">swag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span>
<span class="line"></span></code></pre></div><p>例如项目根目录为<code>go-project-name</code>，运行上面命令后，Swagger会生成<code>~/xxx/go-project-name/doc</code>目录，该目录下有三个文件<code>docs.go</code>、<code>swagger.json</code>、<code>swagger.yaml</code></p><blockquote><p>还可以使用<code>swag fmt</code>命令来格式化swagger注释格式</p></blockquote><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">swag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fmt</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 或者 目录可以是其他目录 不一定一定是swagger名称目录</span></span>
<span class="line"><span style="color:#FFCB6B;">swag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fmt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxx/swagger/</span></span>
<span class="line"></span></code></pre></div><h2 id="gin-swagger注解" tabindex="-1">gin-swagger注解 <a class="header-anchor" href="#gin-swagger注解" aria-hidden="true">#</a></h2><ul><li>更多详细注解可点击<a href="https://swaggo.github.io/swaggo.io/declarative_comments_format/" target="_blank" rel="noreferrer">swaggo.github.io/swaggo.io</a>、<a href="https://github.com/swaggo/swag#declarative-comments-format" target="_blank" rel="noreferrer">github.com/swaggo/swag</a>查看</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li><code>注解</code>和<code>函数</code>之间不能有空行，否则swagger将不会展示接口文档</li></ul><blockquote><p>错误写法</p></blockquote><div class="language-Go"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// @Summary </span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xx</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><blockquote><p>正确写法</p></blockquote><div class="language-Go"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// @Summary </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xx</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><ul><li>如果本地接口文档有更新，只需在项目根目录下再次执行<code>swag init</code>，然后重启服务即可</li></ul></div><h3 id="全局注解" tabindex="-1">全局注解 <a class="header-anchor" href="#全局注解" aria-hidden="true">#</a></h3><hr><h4 id="title" tabindex="-1">@Title <a class="header-anchor" href="#title" aria-hidden="true">#</a></h4><p>当前API文档的标题</p><h4 id="version" tabindex="-1">@Version <a class="header-anchor" href="#version" aria-hidden="true">#</a></h4><p>当前API文档版本</p><h4 id="description" tabindex="-1">@Description <a class="header-anchor" href="#description" aria-hidden="true">#</a></h4><p>当前API文档详细描述</p><h4 id="basepath" tabindex="-1">BasePath <a class="header-anchor" href="#basepath" aria-hidden="true">#</a></h4><p>当前API的公共路径前缀</p><h3 id="api层面注解" tabindex="-1">API层面注解 <a class="header-anchor" href="#api层面注解" aria-hidden="true">#</a></h3><hr><h4 id="tags" tabindex="-1">@Tags <a class="header-anchor" href="#tags" aria-hidden="true">#</a></h4><p>表示当前API的分类标签，比如属于<code>user</code>模块</p><h4 id="summary" tabindex="-1">@Summary <a class="header-anchor" href="#summary" aria-hidden="true">#</a></h4><p>表示某API接口的摘要</p><h4 id="produce" tabindex="-1">@Produce <a class="header-anchor" href="#produce" aria-hidden="true">#</a></h4><p>表示API可以产生的<code>MIME类型</code>，可以理解为接口响应类型，可以是<code>json</code>、<code>xml</code>、<code>html</code>等类型</p><h4 id="param" tabindex="-1">@Param <a class="header-anchor" href="#param" aria-hidden="true">#</a></h4><p>表示参数格式，从左到右依次是<code>参数名</code>、<code>参数类型</code>、<code>数据类型</code>、<code>是否必填</code>、<code>注释</code></p><p>参数类型有：</p><ul><li><p><code>header</code></p></li><li><p><code>body</code>：POST请求参数</p></li><li><p><code>query</code>：GET请求参数</p></li><li><p><code>path</code>：RESTFUL风格的参数，例如<code>/user/:id/</code></p></li></ul><h4 id="success" tabindex="-1">@Success <a class="header-anchor" href="#success" aria-hidden="true">#</a></h4><p>响应成功状态，从左到右依次是<code>状态码</code>、<code>参数类型</code>、<code>数据类型</code>、<code>注释</code></p><h4 id="failure" tabindex="-1">@Failure <a class="header-anchor" href="#failure" aria-hidden="true">#</a></h4><p>响应失败状态，从左到右依次是<code>状态码</code>、<code>参数类型</code>、<code>数据类型</code>、<code>注释</code></p><h4 id="router" tabindex="-1">@Router <a class="header-anchor" href="#router" aria-hidden="true">#</a></h4><p>路由，从左到右依次是<code>路由地址</code>、<code>HTTP请求方法</code></p><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-hidden="true">#</a></h2><p>有几点需要注意</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>必须引入通过<code>swag init</code>生成的swagger的<code>docs</code>模块</p></li><li><p>路由中必须添加<code>GET(&quot;/swagger/*any&quot;, xxx)</code>路由</p></li><li><p>有接口更改/添加时需要执行<code>swag init</code>后，重启服务才能生效</p></li></ul></div><p><code>main.go</code></p><div class="language-Go"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">gin-related/9-swagger/api</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	_ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">gin-related/9-swagger/docs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 这个docs文件模块必须要引入</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/gin-gonic/gin</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	swaggerFiles </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/swaggo/files</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	ginSwagger </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/swaggo/gin-swagger</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	router </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> gin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Default</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// 下面这个必须要有</span></span>
<span class="line"><span style="color:#A6ACCD;">	router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GET</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/swagger/*any</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ginSwagger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WrapHandler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">swaggerFiles</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Handler</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">	router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">POST</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/user/add</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> api</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">AddUser</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">:6100</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>api/user.go</code></p><div class="language-Go"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">api</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/gin-gonic/gin</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">log</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">net/http</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	UserName </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">json:&quot;user_name&quot; binding:&quot;required&quot;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">	Age      </span><span style="color:#C792EA;">uint8</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">json:&quot;age&quot; binding:&quot;required,gte=18&quot;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">	Gender   </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">json:&quot;gender&quot; binding:&quot;required,oneof=male female&quot;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Response</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	Code </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">json:&quot;code&quot;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">	Msg  </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">json:&quot;msg&quot;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">	Data </span><span style="color:#89DDFF;">interface{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">json:&quot;data&quot;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// @Summary	添加新用户</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// @Produce	json</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// @Param		user	body		User		true	&quot;用户信息数据&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// @Success	200		{object}	Response	&quot;接口响应成功&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// @Failure	500		{object}	Response	&quot;接口响应失败&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// @Router		/user/add [POST]</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AddUser</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">gin</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> user User</span></span>
<span class="line"><span style="color:#A6ACCD;">	err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBindJSON</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数错误：%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JSON</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StatusOK</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">Response</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			Code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">			Msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数错误，请检查后再提交</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">			Data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JSON</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StatusOK</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">Response</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		Code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		Msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		Data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> user</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,57),p=[e];function t(c,r,i,D,y,F){return n(),a("div",null,p)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
