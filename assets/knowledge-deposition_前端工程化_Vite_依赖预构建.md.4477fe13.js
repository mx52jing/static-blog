import{_ as s,c as o,o as l,a}from"./app.7e3128a6.js";const e="/static-blog/image/Vite/3.png",A=JSON.parse('{"title":"依赖预构建","description":"","frontmatter":{"layout":"doc"},"headers":[{"level":3,"title":"依赖预构建解决的问题","slug":"依赖预构建解决的问题","link":"#依赖预构建解决的问题","children":[]},{"level":3,"title":"关闭依赖预购建","slug":"关闭依赖预购建","link":"#关闭依赖预购建","children":[]}],"relativePath":"knowledge-deposition/前端工程化/Vite/依赖预构建.md"}'),n={name:"knowledge-deposition/前端工程化/Vite/依赖预构建.md"},p=a(`<h1 id="依赖预构建" tabindex="-1">依赖预构建 <a class="header-anchor" href="#依赖预构建" aria-hidden="true">#</a></h1><ul><li><p>默认情况下，<code>esmodule</code>规范下导入模块的时候，要么是<code>绝对路径</code>,要么是<code>相对路径</code>，遇到其他类型的路径不会去解析，所以<code>esmodule</code>在处理导入非<code>绝对/相对</code>路径的时候，不会去搜寻<code>node_modules</code>，而<code>vite</code>会去处理这个情况</p></li><li><p><code>vite</code>遇到非<code>绝对/相对</code>路径的时候，会去进行路径补全，例如：</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 补全前</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lodash-es</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 补全之后</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/node_modules/.vite/deps/lodash-es.js?v=a2b41ab7</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>当<code>vite</code>遇到<code>非esmodule</code>模块的语法，例如<code>commonjs</code>语法，<code>vite</code>会先找到其对应的依赖，然后调用<code>esbuild</code>将其转换为<code>esmodule</code>规范，然后放到当前项目的<code>node_modules/.vite/deps</code>目录下，同时对<code>esmodule</code>规范的各个模块进行统一集成，会将文件中的<code>import</code>引入都集成到引入的文件中</li></ul><p>例如：</p><ul><li><code>index.js</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b)</span></span>
<span class="line"></span></code></pre></div><ul><li><code>a.js</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a模块变量</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><ul><li><code>b.js</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b模块变量</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>集成后的<code>index.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a模块变量</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b模块变量</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b)</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果是原生<code>esmodule</code>来处理，会产生<code>3个http请求</code></p><ol><li>请求<code>index.js</code></li><li>发现<code>index.js</code>通过<code>import</code>导入了<code>a.js</code>模块，会创建<code>http请求</code>，请求<code>a.js</code></li><li>发现<code>index.js</code>通过<code>import</code>导入了<code>b.js</code>模块，会创建<code>http请求</code>，请求<code>b.js</code></li></ol><ul><li>如果依赖的模块过多，会发送<code>多个http请求</code>，所以原生的<code>esmodule</code>不会帮我们处理<code>非绝对路径/非相对路径</code>的引入</li></ul></div><h3 id="依赖预构建解决的问题" tabindex="-1"><strong>依赖预构建</strong>解决的问题 <a class="header-anchor" href="#依赖预构建解决的问题" aria-hidden="true">#</a></h3><ul><li><p>不同第三方包可能不同导入导出方式，<code>依赖预构建</code>会统一处理转换成<code>esmodule</code>的形式</p></li><li><p>对路径处理后直接从<code>.vite/deps</code>引入，统一所有资源的路径，方便<code>路径重写</code></p></li><li><p>解决<code>网络多包传输</code>问题</p></li></ul><h3 id="关闭依赖预购建" tabindex="-1">关闭依赖预购建 <a class="header-anchor" href="#关闭依赖预购建" aria-hidden="true">#</a></h3><ul><li>如果不想让<code>vite</code>进行依赖预购建，可以通过配置实现</li></ul><p><code>vite.config.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/** </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">type</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">import(&#39;vite&#39;).UserConfig</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">exclude</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lodash-es</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// 指定数组中的依赖不进行构建</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>以<code>lodash-es</code>为例，当去除依赖预构建后，<code>vite</code>会把所有的<code>esmodule</code>模块都通过<code>创建http请求</code>的方式引入，会发送巨量请求</li></ul><p><img src="`+e+'" alt=""></p><ul><li>从上图可以看到，关闭<code>依赖预构建</code>后，浏览器发送了大量请求去加载<code>lodash-es</code>的方法模块，这将造成巨大的网络开销</li></ul>',23),c=[p];function t(i,d,r,y,D,F){return l(),o("div",null,c)}const u=s(n,[["render",t]]);export{A as __pageData,u as default};
